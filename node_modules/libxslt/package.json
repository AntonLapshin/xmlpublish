{
  "name": "libxslt",
  "version": "0.1.4",
  "description": "Node.js bindings for libxslt compatible with libxmljs",
  "main": "index.js",
  "scripts": {
    "test": "mocha -R spec",
    "install": "node-gyp rebuild"
  },
  "keywords": [
    "xml",
    "xsl",
    "xslt",
    "libxslt",
    "bindings"
  ],
  "author": {
    "name": "Alban Mouton",
    "email": "alban.mouton@gmail.com"
  },
  "homepage": "https://github.com/albanm/node-libxslt",
  "bugs": {
    "url": "https://github.com/albanm/node-libxslt/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/albanm/node-libxslt.git"
  },
  "license": "MIT",
  "dependencies": {
    "nan": "~1.2.0",
    "libxmljs": "git://github.com/albanm/libxmljs",
    "bindings": "~1.2.1"
  },
  "devDependencies": {
    "mocha": "~1.21.0",
    "should": "~4.0.4",
    "async": "~0.9.0"
  },
  "gypfile": true,
  "readme": "node-libxslt\n============\n\n[![Build status](https://travis-ci.org/albanm/node-libxslt.svg)](https://travis-ci.org/albanm/node-libxslt)\n[![Code Climate](https://codeclimate.com/github/albanm/node-libxslt/badges/gpa.svg)](https://codeclimate.com/github/albanm/node-libxslt)\n[![NPM version](https://badge.fury.io/js/libxslt.svg)](http://badge.fury.io/js/libxslt)\n\nNode.js bindings for [libxslt](http://xmlsoft.org/libxslt/) compatible with [libxmljs](https://github.com/polotek/libxmljs/issues/226).\n\nInstallation\n------------\n\n\tnpm install libxslt\n\nBasic usage\n-----------\n\n```js\nvar lixslt = require('libxslt');\n\nvar stylesheet = libxslt.parse(stylesheetString);\n\nvar params = {\n\tMyParam: 'my value'\n};\n\n// 'params' parameter is optional\nstylesheet.apply(documentString, params, function(err, result){\n\t// err contains any error from parsing the document or applying the stylesheet\n\t// result is a string containing the result of the transformation\n});\n\n```\n\nLibxmljs integration\n--------------------\n\n:warning: right now node-libxslt is only compatible with the temporary fork [albanm/libxmljs](https://github.com/albanm/libxmljs).\nThis situation will end if the [related pull request](https://github.com/polotek/libxmljs/pull/247) is accepted.\n\nNode-libxslt depends on [libxmljs](https://github.com/polotek/libxmljs/issues/226) in the same way that [libxslt](http://xmlsoft.org/libxslt/) depends on [libxml](http://xmlsoft.org/). This dependancy makes possible to bundle and to load in memory libxml only once for users of both libraries.\n\nIt is possible to work with libxmljs documents instead of strings:\n\n```js\nvar lixslt = require('libxslt');\nvar libxmljs = require('libxmljs');\n\nvar stylesheetObj = libxmljs.parseXml(stylesheetString);\nvar stylesheet = libxslt.parse(stylesheetObj);\n\nvar document = libxmljs.parseXml(documentString);\nstylesheet.apply(document, function(err, result){\n\t// result is now a libxmljs document containing the result of the transformation\n});\n\n```\n\nThis is only useful if you already needed to parse a document before applying the stylesheet for previous manipulations.\nOr if you wish to be returned a document instead of a string for ulterior manipulations.\nIn these cases you will prevent extraneous parsings and serializations.\t\n\nSync or async\n-------------\n\nThe same *apply()* function can be used in synchronous mode simply by removing the callback parameter.\nIn this case if a parsing error occurs it will be thrown.\n\n```js\nvar lixslt = require('libxslt');\n\nvar stylesheet = libxslt.parse(stylesheetString);\n\nvar result = stylesheet.apply(documentString);\n\n```\n\nThe asynchronous function uses the [libuv work queue](http://nikhilm.github.io/uvbook/threads.html#libuv-work-queue)\nto provide parallelized computation in node.js worker threads. This makes it non-blocking for the main event loop of node.js.\n\nNote that libxmljs parsing doesn't use the work queue, so only a part of the process is actually parallelized.\n\nA small benchmark is available in the project. It has a very limited scope, it uses always the same small transformation a few thousand times.\nTo run it use:\n\n    node benchmark.js\n\nThis is an example of its results with an intel core i5 3.1GHz:\n\n```\n10000 synchronous apply from parsed doc\t\t\t \t\tin 331ms = 30211/s\n10000 asynchronous apply in series from parsed doc\t\tin 538ms = 18587/s\n10000 asynchronous apply in parallel from parsed doc\tin 217ms = 46083/s\n```\n\nObservations:\n  - it's pretty fast !\n  - asynchronous is slower when running in series.\n  - asynchronous can become faster when concurrency is high.\n\nConclusion:\n  - use asynchronous by default it will be kinder to your main event loop and is pretty fast anyway.\n  - use synchronous only if you really want the highest performance and expect low concurrency.\n  - of course you can also use synchronous simply to reduce code depth. If you don't expect a huge load it will be ok.\n\nEnvironment compatibility\n-------------------------\n\nFor now 64bits linux and 32bits windows are confirmed. Other environments are probably ok, but not checked. Please report an issue if you encounter some difficulties.\n\nNode-libxslt depends on [node-gyp](https://github.com/TooTallNate/node-gyp), you will have to go through its installation. This can be a bit painful mostly for windows users. There is no system dependancy otherwise, libxslt is bundled in the project.",
  "readmeFilename": "README.md",
  "_id": "libxslt@0.1.4",
  "_shasum": "6dc50993f7f738da2932fa288cee2b61e497421c",
  "_from": "libxslt@",
  "_resolved": "https://registry.npmjs.org/libxslt/-/libxslt-0.1.4.tgz"
}
